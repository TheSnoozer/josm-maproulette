/*
 * MapRoulette API
 * API for MapRoulette enabling the creation and maintenance of MapRoulette challenges
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.thesnoozer.maproulette.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.thesnoozer.maproulette.client.model.ElementTagChange;
import io.github.thesnoozer.maproulette.client.model.OSMType;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * ElementUpdate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2022-11-08T21:39:00.063842+01:00[Europe/Berlin]")
public class ElementUpdate {
  @JsonProperty("osmId")
  private Long osmId = null;

  @JsonProperty("osmType")
  private OSMType osmType = null;

  @JsonProperty("version")
  private Integer version = null;

  @JsonProperty("tags")
  private ElementTagChange tags = null;

  public ElementUpdate osmId(Long osmId) {
    this.osmId = osmId;
    return this;
  }

   /**
   * The OSM identifier for the feature that is to be updated
   * @return osmId
  **/
  @Schema(description = "The OSM identifier for the feature that is to be updated")
  public Long getOsmId() {
    return osmId;
  }

  public void setOsmId(Long osmId) {
    this.osmId = osmId;
  }

  public ElementUpdate osmType(OSMType osmType) {
    this.osmType = osmType;
    return this;
  }

   /**
   * Get osmType
   * @return osmType
  **/
  @Schema(description = "")
  public OSMType getOsmType() {
    return osmType;
  }

  public void setOsmType(OSMType osmType) {
    this.osmType = osmType;
  }

  public ElementUpdate version(Integer version) {
    this.version = version;
    return this;
  }

   /**
   * The version of the OSM feature that you are updating from
   * @return version
  **/
  @Schema(description = "The version of the OSM feature that you are updating from")
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }

  public ElementUpdate tags(ElementTagChange tags) {
    this.tags = tags;
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @Schema(description = "")
  public ElementTagChange getTags() {
    return tags;
  }

  public void setTags(ElementTagChange tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElementUpdate elementUpdate = (ElementUpdate) o;
    return Objects.equals(this.osmId, elementUpdate.osmId) &&
        Objects.equals(this.osmType, elementUpdate.osmType) &&
        Objects.equals(this.version, elementUpdate.version) &&
        Objects.equals(this.tags, elementUpdate.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(osmId, osmType, version, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElementUpdate {\n");
    
    sb.append("    osmId: ").append(toIndentedString(osmId)).append("\n");
    sb.append("    osmType: ").append(toIndentedString(osmType)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
