/*
 * MapRoulette API
 * API for MapRoulette enabling the creation and maintenance of MapRoulette challenges
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.thesnoozer.maproulette.client.api;

import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteExceptionStatusMessage;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelChallenge;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelClusteredPoint;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelTask;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteModelsVirtualChallenge;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for VirtualChallengeApi
 */
@Ignore
public class VirtualChallengeApiTest {

    private final VirtualChallengeApi api = new VirtualChallengeApi();

    /**
     * Create a Virtual Challenge
     *
     * Will create a new Virtual Challenge from the supplied JSON in the body. When creating the Virtual Challenge, leave the ID field out of the body json, if updating (generally use the PUT method) include the ID field.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTest() throws Exception {
        OrgMaprouletteModelsVirtualChallenge body = null;
        String apiKey = null;
        OrgMaprouletteModelsVirtualChallenge response = api.create(body, apiKey);

        // TODO: test validations
    }
    /**
     * Deletes an existing Virtual Challenge
     *
     * Deletes an existing Virtual Challenge based on the supplied ID. This will delete all associated Tasks of the Virtual Challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws Exception {
        Long id = null;
        String apiKey = null;
        Boolean immediate = null;
        OrgMaprouletteExceptionStatusMessage response = api.delete(id, apiKey, immediate);

        // TODO: test validations
    }
    /**
     * Retrieves clustered Task points
     *
     * Retrieves all the Tasks for a specific Virtual Challenge as clustered points to potentially display on a map.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getClusteredPointsTest() throws Exception {
        Long id = null;
        String filter = null;
        List<OrgMaprouletteFrameworkModelClusteredPoint> response = api.getClusteredPoints(id, filter);

        // TODO: test validations
    }
    /**
     * Retrieves nearby Tasks in Virtual Challenge
     *
     * Retrieves tasks geographically closest to the specified task within the same Virtual Challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNearbyTasksTest() throws Exception {
        Long id = null;
        Long proximityId = null;
        Integer limit = null;
        Object proximity = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.getNearbyTasks(id, proximityId, limit, proximity);

        // TODO: test validations
    }
    /**
     * Retrieves random Task
     *
     * Retrieves a random Task based on the search criteria and contained within the current Virtual Challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRandomTaskTest() throws Exception {
        Long cid = null;
        Long proximity = null;
        OrgMaprouletteFrameworkModelTask response = api.getRandomTask(cid, proximity);

        // TODO: test validations
    }
    /**
     * Retrieves next Task
     *
     * Retrieves the next sequential Task based on the task ordering within the Virtual Challenge. If it is currently on the last task it will response with the first task in the Virtual Challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSequentialNextTaskTest() throws Exception {
        Long cid = null;
        Long id = null;
        OrgMaprouletteFrameworkModelTask response = api.getSequentialNextTask(cid, id);

        // TODO: test validations
    }
    /**
     * Retrieves previous Task
     *
     * Retrieves the previous sequential Task based on the task ordering within the Virtual Challenge. If it is currently on the first task it will response with the last task in the Virtual Challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSequentialPreviousTaskTest() throws Exception {
        Long cid = null;
        Long id = null;
        OrgMaprouletteFrameworkModelTask response = api.getSequentialPreviousTask(cid, id);

        // TODO: test validations
    }
    /**
     * Retrieves Virtual Challenge GeoJSON
     *
     * Retrieves the GeoJSON for the Virtual Challenge that represents all the associated Tasks of the Virtual Challenge. WARNING* This API query can be quite slow due to retrieving all the points that is grouped in various different challenges
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVirtualChallengeGeoJSONTest() throws Exception {
        Long id = null;
        String filter = null;
        api.getVirtualChallengeGeoJSON(id, filter);

        // TODO: test validations
    }
    /**
     * List all the Virtual Challenge.
     *
     * Lists all the Virtual Challenges in the system
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listTest() throws Exception {
        Integer limit = null;
        Integer page = null;
        Boolean onlyEnabled = null;
        List<OrgMaprouletteModelsVirtualChallenge> response = api.list(limit, page, onlyEnabled);

        // TODO: test validations
    }
    /**
     * List all the Virtual Challenges Tasks.
     *
     * Lists all the Tasks that are children of the supplied Virtual Challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listTasksTest() throws Exception {
        Long id = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.listTasks(id, limit, page);

        // TODO: test validations
    }
    /**
     * Retrieves an already existing Virtual Challenge
     *
     * Retrieves an already existing Virtual Challenge based on the supplied ID in the URL.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readTest() throws Exception {
        Long id = null;
        OrgMaprouletteModelsVirtualChallenge response = api.read(id);

        // TODO: test validations
    }
    /**
     * Retrieves an already existing Virtual Challenge
     *
     * Retrieves an already existing Virtual Challenge based on the name of the Virtual Challenge rather than an ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readByNameTest() throws Exception {
        Long id = null;
        String name = null;
        OrgMaprouletteModelsVirtualChallenge response = api.readByName(id, name);

        // TODO: test validations
    }
    /**
     * Updates a Virtual Challenge
     *
     * Will update an already existing Virtual Challenge from the supplied JSON in the body.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws Exception {
        OrgMaprouletteFrameworkModelChallenge body = null;
        String apiKey = null;
        Long id = null;
        OrgMaprouletteModelsVirtualChallenge response = api.update(body, apiKey, id);

        // TODO: test validations
    }
}
