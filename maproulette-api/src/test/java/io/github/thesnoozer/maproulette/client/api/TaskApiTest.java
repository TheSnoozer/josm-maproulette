/*
 * MapRoulette API
 * API for MapRoulette enabling the creation and maintenance of MapRoulette challenges
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.thesnoozer.maproulette.client.api;

import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteExceptionStatusMessage;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelClusteredPoint;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelTag;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelTask;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelTaskCluster;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for TaskApi
 */
@Ignore
public class TaskApiTest {

    private final TaskApi api = new TaskApi();

    /**
     * Retrieve task attachment
     *
     * Retrieve attachment identified by attachmentId on specified task
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void attachmentTest() throws Exception {
        Long id = null;
        String attachmentId = null;
        api.attachment(id, attachmentId);

        // TODO: test validations
    }
    /**
     * Download task attachment data as file
     *
     * Download attachment attachment data as file
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void attachmentDataTest() throws Exception {
        Long id = null;
        String attachmentId = null;
        String filename = null;
        api.attachmentData(id, attachmentId, filename);

        // TODO: test validations
    }
    /**
     * Create a batch of Tasks
     *
     * Will create multiple new Tasks from the JSONArray supplied in the body. Each JSON object is basically a Task object that is processed similarly to the singular /sask POST. If Tasks already exist with the name, they will simply be skipped, ie. not updated.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void batchUploadPostTest() throws Exception {
        List<OrgMaprouletteFrameworkModelTask> body = null;
        String apiKey = null;
        api.batchUploadPost(body, apiKey);

        // TODO: test validations
    }
    /**
     * Update a batch of Tasks
     *
     * Will update multiple already existing Tasks from the JSONArray supplied in the body. Each JSON object is basically a Task object that is processed similarly to the singular /task POST. If a Task does not exist it will be created from scratch
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void batchUploadPutTest() throws Exception {
        List<OrgMaprouletteFrameworkModelTask> body = null;
        String apiKey = null;
        api.batchUploadPut(body, apiKey);

        // TODO: test validations
    }
    /**
     * Changes status on tasks matching criteria
     *
     * Will changes status on tasks that match the given search parameters.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkStatusChangeTest() throws Exception {
        Integer newStatus = null;
        String apiKey = null;
        api.bulkStatusChange(newStatus, apiKey);

        // TODO: test validations
    }
    /**
     * Retrieve any change XML that is part of this task&#x27;s cooperative work
     *
     * Retrieve change XML that is part of this task&#x27;s cooperative work. The cooperative work on the task should be consulted to determine if any change exists for the task, and which change format was used (i.e. JOSM, OSMChange, etc).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cooperativeWorkChangeXMLTest() throws Exception {
        Long id = null;
        String filename = null;
        OrgMaprouletteFrameworkModelTask response = api.cooperativeWorkChangeXML(id, filename);

        // TODO: test validations
    }
    /**
     * Create a Task
     *
     * Will create a new Task from the supplied JSON in the body. When creating the Task, leave the ID field out of the body json, if updating (generally use the PUT method) include the ID field.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTest() throws Exception {
        OrgMaprouletteFrameworkModelTask body = null;
        String apiKey = null;
        OrgMaprouletteFrameworkModelTask response = api.create(body, apiKey);

        // TODO: test validations
    }
    /**
     * Deletes an existing Task
     *
     * Deletes an existing Task based on the supplied ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws Exception {
        Long id = null;
        String apiKey = null;
        Boolean immediate = null;
        OrgMaprouletteExceptionStatusMessage response = api.delete(id, apiKey, immediate);

        // TODO: test validations
    }
    /**
     * Delete Task Tags
     *
     * Deletes all the supplied tags from the Task
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTagsFromItemTest() throws Exception {
        Long id = null;
        String tags = null;
        String apiKey = null;
        api.deleteTagsFromItem(id, tags, apiKey);

        // TODO: test validations
    }
    /**
     * Find Task matching search criteria
     *
     * Finds a list of Tasks that match a specific search criteria. The search criteria is simply a string that is contained in the Task name. String case sensitivity is ignored.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findTest() throws Exception {
        String q = null;
        Long parentId = null;
        Integer limit = null;
        Integer page = null;
        Boolean onlyEnabled = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.find(q, parentId, limit, page, onlyEnabled);

        // TODO: test validations
    }
    /**
     * Retrieve Tasks based on provided tags
     *
     * Retrieves all the Tasks that contain at least one of the supplied tags.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getItemsBasedOnTagsTest() throws Exception {
        String tags = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.getItemsBasedOnTags(tags, limit, page);

        // TODO: test validations
    }
    /**
     * Retrieves random Task
     *
     * Retrieves a random Task based on the search criteria.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRandomTasksTest() throws Exception {
        String ps = null;
        String cs = null;
        String ct = null;
        String tags = null;
        String ts = null;
        Integer limit = null;
        Long proximity = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.getRandomTasks(ps, cs, ct, tags, ts, limit, proximity);

        // TODO: test validations
    }
    /**
     * Retrieve tags for Task
     *
     * Retrieves all the Tags that have been added to the specified Task
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagsForTaskTest() throws Exception {
        Long id = null;
        List<OrgMaprouletteFrameworkModelTag> response = api.getTagsForTask(id);

        // TODO: test validations
    }
    /**
     * Retrieves task clusters. USE PUT METHOD
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTaskClustersTest() throws Exception {
        Integer points = null;
        api.getTaskClusters(points);

        // TODO: test validations
    }
    /**
     * Retrieves task clusters.
     *
     * Retrieves task clusters that contain the centroid location for a group of tasks
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTaskClusters_0Test() throws Exception {
        Integer points = null;
        List<OrgMaprouletteFrameworkModelTaskCluster> response = api.getTaskClusters_0(points);

        // TODO: test validations
    }
    /**
     * Retrieves a history for the task
     *
     * Retrieves list of task history log entries. This includes comments, status actions, and review actions.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTaskHistoryLogTest() throws Exception {
        Long id = null;
        OrgMaprouletteFrameworkModelTask response = api.getTaskHistoryLog(id);

        // TODO: test validations
    }
    /**
     * Retrieves Tasks within a bounding box
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTasksInBoundingBoxTest() throws Exception {
        Double left = null;
        Double bottom = null;
        Double right = null;
        Double top = null;
        Integer limit = null;
        Integer page = null;
        Boolean excludeLocked = null;
        String sort = null;
        String order = null;
        Boolean includeTotal = null;
        Boolean includeGeometries = null;
        Boolean includeTags = null;
        api.getTasksInBoundingBox(left, bottom, right, top, limit, page, excludeLocked, sort, order, includeTotal, includeGeometries, includeTags);

        // TODO: test validations
    }
    /**
     * Retrieves Tasks within a bounding box
     *
     * Retrieves tasks within a given bounding box.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTasksInBoundingBox_0Test() throws Exception {
        Double left = null;
        Double bottom = null;
        Double right = null;
        Double top = null;
        Integer limit = null;
        Integer page = null;
        Boolean excludeLocked = null;
        String sort = null;
        String order = null;
        Boolean includeTotal = null;
        Boolean includeGeometries = null;
        Boolean includeTags = null;
        List<OrgMaprouletteFrameworkModelClusteredPoint> response = api.getTasksInBoundingBox_0(left, bottom, right, top, limit, page, excludeLocked, sort, order, includeTotal, includeGeometries, includeTags);

        // TODO: test validations
    }
    /**
     * Retrieves tasks in a cluster
     *
     * Retrieves tasks contained in a cluster retrieved from api /api/v2/challenge/:id/taskCluster
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTasksInClusterTest() throws Exception {
        Integer clusterId = null;
        Object id = null;
        Integer points = null;
        List<OrgMaprouletteFrameworkModelClusteredPoint> response = api.getTasksInCluster(clusterId, id, points);

        // TODO: test validations
    }
    /**
     * Update Task Changeset
     *
     * Will update the changeset of the task. It will do this by attempting to match the OSM changeset to the Task based on the geometry and the time that the changeset was executed.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void matchToOSMChangeSetTest() throws Exception {
        Long id = null;
        String apiKey = null;
        OrgMaprouletteFrameworkModelTask response = api.matchToOSMChangeSet(id, apiKey);

        // TODO: test validations
    }
    /**
     * Retrieves an already existing Task
     *
     * Retrieves an already existing Task based on the supplied ID in the URL.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readTest() throws Exception {
        Long id = null;
        OrgMaprouletteFrameworkModelTask response = api.read(id);

        // TODO: test validations
    }
    /**
     * Retrieves an already existing Task
     *
     * Retrieves an already existing Task based on the name of the Task rather than an ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readByNameTest() throws Exception {
        Long id = null;
        String name = null;
        OrgMaprouletteFrameworkModelTask response = api.readByName(id, name);

        // TODO: test validations
    }
    /**
     * Refresh an existing lock on a Task
     *
     * Refreshes an existing lock, extending its allowed duration, on the task with the supplied ID. The requesting user must already own an active lock on the task (i.e. via the task/:id/start API) or a 403 will be raised
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void refreshTaskLockTest() throws Exception {
        Long id = null;
        OrgMaprouletteFrameworkModelTask response = api.refreshTaskLock(id);

        // TODO: test validations
    }
    /**
     * Release a Task (unlocks it)
     *
     * Unlocks a Task based on the supplied ID in the URL.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void releaseTaskTest() throws Exception {
        Long id = null;
        OrgMaprouletteFrameworkModelTask response = api.releaseTask(id);

        // TODO: test validations
    }
    /**
     * Changes review status to \&quot;Unnecessary\&quot; on tasks matching criteria
     *
     * Will change review status on tasks that match the given search parameters indicating the tasks do not need a review.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeReviewRequestTest() throws Exception {
        String apiKey = null;
        String ids = null;
        Boolean asMetaReview = null;
        api.removeReviewRequest(apiKey, ids, asMetaReview);

        // TODO: test validations
    }
    /**
     * Update Meta Review Status for a Bundle
     *
     * Will update Tasks meta review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setBundleMetaReviewStatusTest() throws Exception {
        Long id = null;
        Integer status = null;
        String apiKey = null;
        String comment = null;
        String tags = null;
        String errorTags = null;
        api.setBundleMetaReviewStatus(id, status, apiKey, comment, tags, errorTags);

        // TODO: test validations
    }
    /**
     * Update Task Review Status for a Bundle
     *
     * Will update a Tasks review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setBundleTaskReviewStatusTest() throws Exception {
        Long id = null;
        Integer status = null;
        String apiKey = null;
        String comment = null;
        String tags = null;
        String newTaskStatus = null;
        String errorTags = null;
        api.setBundleTaskReviewStatus(id, status, apiKey, comment, tags, newTaskStatus, errorTags);

        // TODO: test validations
    }
    /**
     * Update Bundle Task Status
     *
     * Will update a Bundled list of Tasks statuses to one of the following. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setBundleTaskStatusTest() throws Exception {
        Long bundleId = null;
        Long primaryId = null;
        Integer status = null;
        String apiKey = null;
        String comment = null;
        String tags = null;
        Object requestReview = null;
        api.setBundleTaskStatus(bundleId, primaryId, status, apiKey, comment, tags, requestReview);

        // TODO: test validations
    }
    /**
     * Update Task Meta Review Status
     *
     * Will update a Tasks meta review status to one of the following. 0 - (re)Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setMetaReviewStatusTest() throws Exception {
        Long id = null;
        Integer status = null;
        String apiKey = null;
        String comment = null;
        String tags = null;
        String errorTags = null;
        api.setMetaReviewStatus(id, status, apiKey, comment, tags, errorTags);

        // TODO: test validations
    }
    /**
     * Update Task Review Status
     *
     * Will update a Tasks review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setTaskReviewStatusTest() throws Exception {
        Long id = null;
        Integer status = null;
        String apiKey = null;
        String comment = null;
        String tags = null;
        String newTaskStatus = null;
        String errorTags = null;
        Object asMetaReview = null;
        api.setTaskReviewStatus(id, status, apiKey, comment, tags, newTaskStatus, errorTags, asMetaReview);

        // TODO: test validations
    }
    /**
     * Update Task Status
     *
     * Will update a Tasks status to one of the following. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Too Hard
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setTaskStatusTest() throws Exception {
        Long id = null;
        Integer status = null;
        String apiKey = null;
        String comment = null;
        String tags = null;
        Object requestReview = null;
        api.setTaskStatus(id, status, apiKey, comment, tags, requestReview);

        // TODO: test validations
    }
    /**
     * Start working on a Task (locks it for the user)
     *
     * Locks a Task based on the supplied ID in the URL.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void startOnTaskTest() throws Exception {
        Long id = null;
        OrgMaprouletteFrameworkModelTask response = api.startOnTask(id);

        // TODO: test validations
    }
    /**
     * Updates a Task
     *
     * Will update an already existing Task from the supplied JSON in the body.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws Exception {
        OrgMaprouletteFrameworkModelTask body = null;
        String apiKey = null;
        Long id = null;
        OrgMaprouletteFrameworkModelTask response = api.update(body, apiKey, id);

        // TODO: test validations
    }
    /**
     * Update Completion Responses
     *
     * Will update the completion responses on the Task.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCompletionResponsesTest() throws Exception {
        Long id = null;
        String apiKey = null;
        api.updateCompletionResponses(id, apiKey);

        // TODO: test validations
    }
    /**
     * Updates Task Tags
     *
     * Updates the tags on the Task
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateItemTagsTest() throws Exception {
        Long id = null;
        String tags = null;
        String apiKey = null;
        api.updateItemTags(id, tags, apiKey);

        // TODO: test validations
    }
}
