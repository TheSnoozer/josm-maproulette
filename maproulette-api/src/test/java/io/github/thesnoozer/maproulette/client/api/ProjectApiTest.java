/*
 * MapRoulette API
 * API for MapRoulette enabling the creation and maintenance of MapRoulette challenges
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.thesnoozer.maproulette.client.api;

import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteExceptionStatusMessage;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelChallenge;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelClusteredPoint;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelTask;
import io.github.thesnoozer.maproulette.client.model.Project;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ProjectApi
 */
@Ignore
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    /**
     * Deletes an existing Project
     *
     * Deletes an existing project based on the supplied ID. This will delete all the children Challenges and Tasks under the project as well.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws Exception {
        Long id = null;
        String apiKey = null;
        Boolean immediate = null;
        OrgMaprouletteExceptionStatusMessage response = api.delete(id, apiKey, immediate);

        // TODO: test validations
    }
    /**
     * Retrieve summaries of all tasks in a Project
     *
     * This will retrieve summaries of all the tasks of a given project and respond with a csv
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void extractAllTaskSummariesTest() throws Exception {
        Long projectId = null;
        String cId = null;
        String timezone = null;
        api.extractAllTaskSummaries(projectId, cId, timezone);

        // TODO: test validations
    }
    /**
     * List all the projects.
     *
     * Lists all the projects in the system
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findTest() throws Exception {
        String search = null;
        Integer limit = null;
        Integer page = null;
        Boolean onlyEnabled = null;
        List<Project> response = api.find(search, limit, page, onlyEnabled);

        // TODO: test validations
    }
    /**
     * Find project matching search criteria. Use GET /projects to find instead.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void find_0Test() throws Exception {
        String q = null;
        Integer limit = null;
        Integer page = null;
        Boolean onlyEnabled = null;
        api.find_0(q, limit, page, onlyEnabled);

        // TODO: test validations
    }
    /**
     * Retrieves clustered challenge points
     *
     * Retrieves all the challenges for a specific project as clustered points to potentially display on a map
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getClusteredPointsTest() throws Exception {
        Long id = null;
        String challenges = null;
        Integer limit = null;
        Integer page = null;
        OrgMaprouletteFrameworkModelClusteredPoint response = api.getClusteredPoints(id, challenges, limit, page);

        // TODO: test validations
    }
    /**
     * Retrieve featured projects
     *
     * Get all the currently featured projects
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFeaturedProjectsTest() throws Exception {
        Boolean onlyEnabled = null;
        Integer limit = null;
        Integer page = null;
        List<Project> response = api.getFeaturedProjects(onlyEnabled, limit, page);

        // TODO: test validations
    }
    /**
     * Retrieves random Task
     *
     * Retrieves random tasks based on the search criteria and contained within the current project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRandomTasksTest() throws Exception {
        Long id = null;
        Integer limit = null;
        Long proximity = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.getRandomTasks(id, limit, proximity);

        // TODO: test validations
    }
    /**
     * Retrieves clustered challenge points
     *
     * Retrieves all the challenges as clustered points to potentially display on a map
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSearchedClusteredPointsTest() throws Exception {
        Integer limit = null;
        Integer page = null;
        OrgMaprouletteFrameworkModelClusteredPoint response = api.getSearchedClusteredPoints(limit, page);

        // TODO: test validations
    }
    /**
     * Create a Project
     *
     * Will create a new project from the supplied JSON in the body. When creating the the Project, leave the ID field out of the body json, if updating (generally use the PUT method) and include the ID field.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void insertTest() throws Exception {
        Project body = null;
        String apiKey = null;
        Project response = api.insert(body, apiKey);

        // TODO: test validations
    }
    /**
     * List all the projects challenges.
     *
     * Lists all the challenges that are children of the supplied project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listChildrenTest() throws Exception {
        Long id = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.listChildren(id, limit, page);

        // TODO: test validations
    }
    /**
     * List all the managed projects.
     *
     * Lists all the managed projects in the system for the authenticated user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listManagedProjectsTest() throws Exception {
        String apiKey = null;
        Integer limit = null;
        Integer page = null;
        Boolean onlyEnabled = null;
        Boolean onlyOwned = null;
        String searchString = null;
        String sort = null;
        List<Project> response = api.listManagedProjects(apiKey, limit, page, onlyEnabled, onlyOwned, searchString, sort);

        // TODO: test validations
    }
    /**
     * Retrieves an already existing Project
     *
     * Retrieves an already existing project based on the supplied ID in the URL.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retrieveTest() throws Exception {
        Long id = null;
        Project response = api.retrieve(id);

        // TODO: test validations
    }
    /**
     * Retrieves an already existing Project
     *
     * Retrieves an already existing project based on the name of the project rather than an ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retrieveByNameTest() throws Exception {
        String name = null;
        Project response = api.retrieveByName(name);

        // TODO: test validations
    }
    /**
     * Retrieve all comments for Project
     *
     * This will retrieve all the comments of the descendent tasks of a given Project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retrieveCommentsTest() throws Exception {
        Long id = null;
        Integer limit = null;
        Integer page = null;
        api.retrieveComments(id, limit, page);

        // TODO: test validations
    }
    /**
     * Retrieves already existing Projects based on a given list of ids
     *
     * Retrieves already existing projects based on the supplied IDs
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retrieveListTest() throws Exception {
        String projectIds = null;
        List<Project> response = api.retrieveList(projectIds);

        // TODO: test validations
    }
    /**
     * Updates a Project
     *
     * Will update an already existing project from the supplied JSON in the body.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws Exception {
        Project body = null;
        String apiKey = null;
        Long id = null;
        Project response = api.update(body, apiKey, id);

        // TODO: test validations
    }
}
