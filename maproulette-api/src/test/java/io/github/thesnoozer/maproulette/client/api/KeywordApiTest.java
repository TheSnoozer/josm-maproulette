/*
 * MapRoulette API
 * API for MapRoulette enabling the creation and maintenance of MapRoulette challenges
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.thesnoozer.maproulette.client.api;

import io.github.thesnoozer.maproulette.client.model.Keyword;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteExceptionStatusMessage;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for KeywordApi
 */
@Ignore
public class KeywordApiTest {

    private final KeywordApi api = new KeywordApi();

    /**
     * Create a batch of Keywords
     *
     * Will create multiple new Keyword from the JSONArray supplied in the body. Each JSON object is basically a Keyword object that is processed similarly to the singular /keyword POST. If Keywords already exist with the name, they will simply be skipped, ie. not updated.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void batchUploadPostTest() throws Exception {
        List<Keyword> body = null;
        String apiKey = null;
        api.batchUploadPost(body, apiKey);

        // TODO: test validations
    }
    /**
     * Update a batch of Keywords
     *
     * Will update multiple already existing Keywords from the JSONArray supplied in the body. Each JSON object is basically a Keyword object that is processed similarly to the singular /keyword POST. If a Keyword does not exist it will be created from scratch
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void batchUploadPutTest() throws Exception {
        List<Keyword> body = null;
        String apiKey = null;
        api.batchUploadPut(body, apiKey);

        // TODO: test validations
    }
    /**
     * Deletes an existing Keyword
     *
     * Deletes an existing Keyword based on the supplied ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws Exception {
        Long id = null;
        String apiKey = null;
        OrgMaprouletteExceptionStatusMessage response = api.delete(id, apiKey);

        // TODO: test validations
    }
    /**
     * Finds Keywords
     *
     * Retrieves existing Keywords based on a prefix for the Keyword. So if search for \&quot;tes\&quot; will retrieve all Keywords that start with \&quot;tes\&quot;, like \&quot;tester\&quot;, \&quot;testing\&quot;, \&quot;test\&quot;. The search string is case insensitive.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagsTest() throws Exception {
        String prefix = null;
        String tagType = null;
        Integer limit = null;
        Integer page = null;
        List<Keyword> response = api.getTags(prefix, tagType, limit, page);

        // TODO: test validations
    }
    /**
     * Create a Keyword
     *
     * Will create a new Keyword from the supplied JSON in the body. When creating the Task, leave the ID field out of the body json, if updating (generally use the PUT method) include the ID field.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void insertTest() throws Exception {
        Keyword body = null;
        String apiKey = null;
        Keyword response = api.insert(body, apiKey);

        // TODO: test validations
    }
    /**
     * Retrieves an already existing Keyword
     *
     * Retrieves an already existing Keyword based on the supplied ID in the URL.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retrieveTest() throws Exception {
        Long id = null;
        Keyword response = api.retrieve(id);

        // TODO: test validations
    }
    /**
     * Updates a Keyword
     *
     * Will update an already existing Keyword from the supplied JSON in the body.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws Exception {
        Keyword body = null;
        String apiKey = null;
        Long id = null;
        Keyword response = api.update(body, apiKey, id);

        // TODO: test validations
    }
}
