/*
 * MapRoulette API
 * API for MapRoulette enabling the creation and maintenance of MapRoulette challenges
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.thesnoozer.maproulette.client.api;

import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteExceptionStatusMessage;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelChallenge;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelChallengeListing;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelClusteredPoint;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelTag;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelTask;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ChallengeApi
 */
@Ignore
public class ChallengeApiTest {

    private final ChallengeApi api = new ChallengeApi();

    /**
     * Add tasks to a challenge
     *
     * This will create tasks within a challenge based on the provided geojson in the body of the PUT request
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addTasksToChallengeTest() throws Exception {
        Long id = null;
        String apiKey = null;
        api.addTasksToChallenge(id, apiKey);

        // TODO: test validations
    }
    /**
     * Add tasks to a challenge
     *
     * This will create tasks within a challenge based on the provided file uploaded as part of the PUT request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addTasksToChallengeFromFileTest() throws Exception {
        Long id = null;
        String apiKey = null;
        Boolean lineByLine = null;
        Boolean removeUnmatched = null;
        String dataOriginDate = null;
        Boolean skipSnapshot = null;
        api.addTasksToChallengeFromFile(id, apiKey, lineByLine, removeUnmatched, dataOriginDate, skipSnapshot);

        // TODO: test validations
    }
    /**
     * Update archive status
     *
     * This will update the archive status of the challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void archiveChallengeTest() throws Exception {
        Long challengeId = null;
        api.archiveChallenge(challengeId);

        // TODO: test validations
    }
    /**
     * Create a batch of Challenges
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void batchUploadPostTest() throws Exception {
        api.batchUploadPost();

        // TODO: test validations
    }
    /**
     * Update a batch of Challenges
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void batchUploadPutTest() throws Exception {
        api.batchUploadPut();

        // TODO: test validations
    }
    /**
     * Bulk Archive Challenges.
     *
     * Archive or unarchive a list of challenges
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkArchiveTest() throws Exception {
        api.bulkArchive();

        // TODO: test validations
    }
    /**
     * Clones a Challenge
     *
     * Clones a challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cloneChallengeTest() throws Exception {
        Long id = null;
        String name = null;
        String apiKey = null;
        OrgMaprouletteFrameworkModelChallenge response = api.cloneChallenge(id, name, apiKey);

        // TODO: test validations
    }
    /**
     * Create a Challenge
     *
     * Will create a new challenge from the supplied JSON in the body. When creating the Challenge, leave the ID field out of the body json, if updating (generally use the PUT method) include the ID field.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTest() throws Exception {
        OrgMaprouletteFrameworkModelChallenge body = null;
        String apiKey = null;
        OrgMaprouletteFrameworkModelChallenge response = api.create(body, apiKey);

        // TODO: test validations
    }
    /**
     * Create Tasks for Challenge
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createChildrenTest() throws Exception {
        Long id = null;
        api.createChildren(id);

        // TODO: test validations
    }
    /**
     * Create Challenge from Github
     *
     * This will pull the following files from Github, ${name}_create.json, ${name}_geojson.json, ${name}_info.md, and create a Challenge from it. The create file will be the json used to create the challenge. Similarly to if you supplied json in the create method. The info.md file is just an informational file that can be used later for challenge information to the user. And geojson.json which is used to generate the tasks. If the challenge has been previously created, it will just update the tasks from the geojson
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createFromGithubTest() throws Exception {
        Long projectId = null;
        String username = null;
        String repo = null;
        String name = null;
        Object id = null;
        Boolean rebuild = null;
        api.createFromGithub(projectId, username, repo, name, id, rebuild);

        // TODO: test validations
    }
    /**
     * Deletes an existing Challenge
     *
     * Deletes an existing Challenge based on the supplied ID. This will delete all children Tasks under the Challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws Exception {
        Long id = null;
        String apiKey = null;
        Boolean immediate = null;
        OrgMaprouletteExceptionStatusMessage response = api.delete(id, apiKey, immediate);

        // TODO: test validations
    }
    /**
     * Delete Challenge Tags
     *
     * Deletes all the supplied tags from the Challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTagsFromItemTest() throws Exception {
        Long id = null;
        String apiKey = null;
        String tags = null;
        api.deleteTagsFromItem(id, apiKey, tags);

        // TODO: test validations
    }
    /**
     * Deletes all Challenge Tasks
     *
     * Deletes all the existing tasks within a challenge. This API will also give the option to delete tasks based on the tasks current status. So can delete all \&quot;false positive\&quot; tasks, or all \&quot;fixed and created\&quot; tasks.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTasksTest() throws Exception {
        Long id = null;
        String apiKey = null;
        String statusFilters = null;
        api.deleteTasks(id, apiKey, statusFilters);

        // TODO: test validations
    }
    /**
     * Retrieves children for Challenge
     *
     * Retrieves all the children for a Challenge in an expanded list. Unlike the GET request /challenge/{id}/tasks, this function will wrap the json array list inside of the parent Challenge object, so that you see the full hierarchy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void expandedListTest() throws Exception {
        Long id = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.expandedList(id, limit, page);

        // TODO: test validations
    }
    /**
     * Extended Find Challenge matching search criteria
     *
     * Finds a list of Challenges that match a specific search criteria. The search criteria is uses multiple values from the query string
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void extendedFindTest() throws Exception {
        Integer limit = null;
        Integer page = null;
        String sort = null;
        String order = null;
        Object pid = null;
        Object ps = null;
        Object pe = null;
        Object ct = null;
        Object cs = null;
        Object ce = null;
        Object cd = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.extendedFind(limit, page, sort, order, pid, ps, pe, ct, cs, ce, cd);

        // TODO: test validations
    }
    /**
     * Retrieve task review history of a Challenge
     *
     * This will retrieve review history of all the tasks of a given challenge and respond with a csv
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void extractChallengeReviewHistoryTest() throws Exception {
        Long id = null;
        api.extractChallengeReviewHistory(id);

        // TODO: test validations
    }
    /**
     * Retrieve all comments for Challenge
     *
     * This will retrieve all the comments for all the children tasks of a given challenge and respond with a csv
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void extractCommentsTest() throws Exception {
        Long id = null;
        Integer limit = null;
        Integer page = null;
        api.extractComments(id, limit, page);

        // TODO: test validations
    }
    /**
     * Extracts a Challenge Package
     *
     * This will retrieve a package of the challenge, which will contain json to recreate the challenge, geojson to recreate the tasks, info page in md format if any, all the comments extracted from for the challenge and any metrics and the time the challenge was extracted.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void extractPackageTest() throws Exception {
        Long id = null;
        api.extractPackage(id);

        // TODO: test validations
    }
    /**
     * Retrieve summaries of all tasks for Challenge
     *
     * This will retrieve summaries of all the tasks of a given challenge and respond with a csv
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void extractTaskSummariesTest() throws Exception {
        Long id = null;
        Integer limit = null;
        Integer page = null;
        String status = null;
        String reviewStatus = null;
        String priority = null;
        String exportProperties = null;
        String timezone = null;
        api.extractTaskSummaries(id, limit, page, status, reviewStatus, priority, exportProperties, timezone);

        // TODO: test validations
    }
    /**
     * Retrieve summaries of all tasks for Challenge
     *
     * This will retrieve summaries of all the tasks of a given challenge and respond with a csv
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void extractTaskSummaries_0Test() throws Exception {
        Long id = null;
        String apiKey = null;
        Integer limit = null;
        Integer page = null;
        String status = null;
        String reviewStatus = null;
        String priority = null;
        String exportProperties = null;
        String timezone = null;
        api.extractTaskSummaries_0(id, apiKey, limit, page, status, reviewStatus, priority, exportProperties, timezone);

        // TODO: test validations
    }
    /**
     * Find Challenge matching search criteria
     *
     * Finds a list of Challenges that match a specific search criteria. The search criteria is simply a string that is contained in the Challenge name. String case sensitivity is ignored.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findTest() throws Exception {
        String q = null;
        Long parentId = null;
        Integer limit = null;
        Integer page = null;
        Boolean onlyEnabled = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.find(q, parentId, limit, page, onlyEnabled);

        // TODO: test validations
    }
    /**
     * Retrieves Challenge GeoJSON
     *
     * Retrieves the GeoJSON for the Challenge that represents all the Task children of the Challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getChallengeGeoJSONTest() throws Exception {
        Long id = null;
        String status = null;
        String reviewStatus = null;
        String priority = null;
        String timezone = null;
        String filename = null;
        api.getChallengeGeoJSON(id, status, reviewStatus, priority, timezone, filename);

        // TODO: test validations
    }
    /**
     * Retrieves Challenge GeoJSON
     *
     * Retrieves the GeoJSON for the Challenge that represents all the Task children of the Challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getChallengeGeoJSON_0Test() throws Exception {
        Long id = null;
        String status = null;
        String reviewStatus = null;
        String priority = null;
        String timezone = null;
        String filename = null;
        api.getChallengeGeoJSON_0(id, status, reviewStatus, priority, timezone, filename);

        // TODO: test validations
    }
    /**
     * Retrieves clustered Task points
     *
     * Retrieves all the Tasks for a specific Challenge as clustered points to potentially display on a map
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getClusteredPointsTest() throws Exception {
        Long id = null;
        String filter = null;
        Integer limit = null;
        Boolean excludeLocked = null;
        List<OrgMaprouletteFrameworkModelClusteredPoint> response = api.getClusteredPoints(id, filter, limit, excludeLocked);

        // TODO: test validations
    }
    /**
     * Featured Challenges.
     *
     * Get all the currently featured challenges
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFeaturedChallengesTest() throws Exception {
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.getFeaturedChallenges(limit, page);

        // TODO: test validations
    }
    /**
     * Hottest Challenges.
     *
     * Get the hottest (recently popular) challenges
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getHotChallengesTest() throws Exception {
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.getHotChallenges(limit, page);

        // TODO: test validations
    }
    /**
     * Retrieve challenges based on provided tags
     *
     * Retrieves all the challenges that contain at least one of the supplied tags.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getItemsBasedOnTagsTest() throws Exception {
        String tags = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.getItemsBasedOnTags(tags, limit, page);

        // TODO: test validations
    }
    /**
     * Retrieves nearby Tasks
     *
     * Retrieves tasks geographically closest to the specified task within the same Challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNearbyTasksTest() throws Exception {
        Long cid = null;
        Long proximityId = null;
        Boolean excludeSelfLocked = null;
        Integer limit = null;
        Object proximity = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.getNearbyTasks(cid, proximityId, excludeSelfLocked, limit, proximity);

        // TODO: test validations
    }
    /**
     * Preferred Challenges.
     *
     * Get the preferred challenges which include popular, featured, and newest
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPreferredChallengesTest() throws Exception {
        Integer limit = null;
        Object response = api.getPreferredChallenges(limit);

        // TODO: test validations
    }
    /**
     * Retrieves random Task
     *
     * Retrieves a random Task based on the search criteria and contained within the current Challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRandomTasksTest() throws Exception {
        Long cid = null;
        String s = null;
        String tags = null;
        Integer limit = null;
        Long proximity = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.getRandomTasks(cid, s, tags, limit, proximity);

        // TODO: test validations
    }
    /**
     * Retrieves prioritized random Task
     *
     * Retrieves a prioritized random Task contained within the current Challenge, with higher priority tasks being returned ahead of lower priority tasks
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRandomTasksWithPriorityTest() throws Exception {
        Long cid = null;
        String s = null;
        String tags = null;
        Integer limit = null;
        Long proximity = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.getRandomTasksWithPriority(cid, s, tags, limit, proximity);

        // TODO: test validations
    }
    /**
     * Retrieves random Task
     *
     * Retrieves a random Task based on the search criteria and contained within the current Challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRandomTasks_0Test() throws Exception {
        Long cid = null;
        String s = null;
        String tags = null;
        Integer limit = null;
        Long proximity = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.getRandomTasks_0(cid, s, tags, limit, proximity);

        // TODO: test validations
    }
    /**
     * Retrieves next Task
     *
     * Retrieves the next sequential Task based on the task ordering within the Challenge. If it is currently on the last task it will response with the first task in the challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSequentialNextTaskTest() throws Exception {
        Long cid = null;
        Long id = null;
        String statusList = null;
        OrgMaprouletteFrameworkModelTask response = api.getSequentialNextTask(cid, id, statusList);

        // TODO: test validations
    }
    /**
     * Retrieves previous Task
     *
     * Retrieves the previous sequential Task based on the task ordering within the Challenge. If it is currently on the first task it will response with the last task in the challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSequentialPreviousTaskTest() throws Exception {
        Long cid = null;
        Long id = null;
        String statusList = null;
        OrgMaprouletteFrameworkModelTask response = api.getSequentialPreviousTask(cid, id, statusList);

        // TODO: test validations
    }
    /**
     * Retrieve tags for Challenge
     *
     * Retrieves all the Tags that have been added to the specified Challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTagsForChallengeTest() throws Exception {
        Long id = null;
        List<OrgMaprouletteFrameworkModelTag> response = api.getTagsForChallenge(id);

        // TODO: test validations
    }
    /**
     * List all the Challenges.
     *
     * Lists all the Challenges in the system
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listTest() throws Exception {
        Integer limit = null;
        Integer page = null;
        Boolean onlyEnabled = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.list(limit, page, onlyEnabled);

        // TODO: test validations
    }
    /**
     * List all the Challenges with review tasks.
     *
     * Lists all the Challenges in the system with review tasks.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listChallengesTest() throws Exception {
        Integer reviewTasksType = null;
        String tStatus = null;
        Boolean excludeOtherReviewers = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.listChallenges(reviewTasksType, tStatus, excludeOtherReviewers, limit, page);

        // TODO: test validations
    }
    /**
     * List all the Challenges Tasks.
     *
     * Lists all the Tasks that are children of the supplied Challenge.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listChildrenTest() throws Exception {
        Long id = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.listChildren(id, limit, page);

        // TODO: test validations
    }
    /**
     * List challenges in specified projects
     *
     * Retrieves a lightweight listing of challenges, with just a few basic fields for each, that belong to the specified project(s).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listingTest() throws Exception {
        String projectIds = null;
        Integer limit = null;
        Integer page = null;
        Boolean onlyEnabled = null;
        Object parentId = null;
        List<OrgMaprouletteFrameworkModelChallengeListing> response = api.listing(projectIds, limit, page, onlyEnabled, parentId);

        // TODO: test validations
    }
    /**
     * Match OSM Changesets
     *
     * This will go through every task and try to match an OSM changeset with the task
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void matchChangeSetsTest() throws Exception {
        Long id = null;
        Boolean skipSet = null;
        api.matchChangeSets(id, skipSet);

        // TODO: test validations
    }
    /**
     * Move Challenge to another Project
     *
     * Will move a challenge into another project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moveChallengeTest() throws Exception {
        Long projectId = null;
        Long id = null;
        List<OrgMaprouletteFrameworkModelTag> response = api.moveChallenge(projectId, id);

        // TODO: test validations
    }
    /**
     * Move Challenges to another Project
     *
     * Will move a list of challenges into another project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void moveChallengesTest() throws Exception {
        Long projectId = null;
        List<OrgMaprouletteFrameworkModelTag> response = api.moveChallenges(projectId);

        // TODO: test validations
    }
    /**
     * Retrieves an already existing Challenge
     *
     * Retrieves an already existing Challenge based on the supplied ID in the URL.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readTest() throws Exception {
        Long id = null;
        OrgMaprouletteFrameworkModelChallenge response = api.read(id);

        // TODO: test validations
    }
    /**
     * Retrieves an already existing Challenge
     *
     * Retrieves an already existing Challenge based on the name of the Challenge rather than an ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void readByNameTest() throws Exception {
        Long id = null;
        String name = null;
        OrgMaprouletteFrameworkModelChallenge response = api.readByName(id, name);

        // TODO: test validations
    }
    /**
     * Rebuild a Challenge
     *
     * Rebuilds a challenge that was originally built by an overpass query or remote geojson.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void rebuildChallengeTest() throws Exception {
        Long id = null;
        String apiKey = null;
        Boolean removeUnmatched = null;
        Boolean skipSnapshot = null;
        api.rebuildChallenge(id, apiKey, removeUnmatched, skipSnapshot);

        // TODO: test validations
    }
    /**
     * Reset Task Instructions
     *
     * This will reset all the task instructions so that the task instructions revert to the Challenge instruction.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void resetTaskInstructionsTest() throws Exception {
        Long id = null;
        String apiKey = null;
        api.resetTaskInstructions(id, apiKey);

        // TODO: test validations
    }
    /**
     * Retrieve all comments for Challenge
     *
     * This will retrieve all the comments for all the children tasks of a given challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retrieveCommentsTest() throws Exception {
        Long id = null;
        Integer limit = null;
        Integer page = null;
        api.retrieveComments(id, limit, page);

        // TODO: test validations
    }
    /**
     * Undeletes a Challenge
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void undeleteTest() throws Exception {
        Long id = null;
        api.undelete(id);

        // TODO: test validations
    }
    /**
     * Updates a Challenge
     *
     * Will update an already existing challenge from the supplied JSON in the body. When updating the Challenge object you can within the same json body include Task children under the \&quot;children\&quot; key.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws Exception {
        OrgMaprouletteFrameworkModelChallenge body = null;
        String apiKey = null;
        Long id = null;
        OrgMaprouletteFrameworkModelChallenge response = api.update(body, apiKey, id);

        // TODO: test validations
    }
    /**
     * Create Tasks for Challenge
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateChildrenTest() throws Exception {
        Long id = null;
        api.updateChildren(id);

        // TODO: test validations
    }
    /**
     * Update Task Priorities
     *
     * Updates all the Task priorities in a Challenge based on the priority rules setup in the Challenge
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTaskPrioritiesTest() throws Exception {
        Long id = null;
        String apiKey = null;
        OrgMaprouletteExceptionStatusMessage response = api.updateTaskPriorities(id, apiKey);

        // TODO: test validations
    }
}
