/*
 * MapRoulette API
 * API for MapRoulette enabling the creation and maintenance of MapRoulette challenges
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.thesnoozer.maproulette.client.api;

import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteExceptionStatusMessage;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelChallenge;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelProjectManager;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelTask;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelUser;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelUserSettings;
import io.github.thesnoozer.maproulette.client.model.PublicUser;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Grant role to user on project
     *
     * Grants a user an Admin, Write or Read role on the project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addUserToProjectTest() throws Exception {
        Long userId = null;
        Long projectId = null;
        Integer role = null;
        String apiKey = null;
        Boolean isOSMUserId = null;
        api.addUserToProject(userId, projectId, role, apiKey, isOSMUserId);

        // TODO: test validations
    }
    /**
     * Grant role on project to a list of users
     *
     * Grants Admin, Write, or Read role on project to list of users
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addUsersToProjectTest() throws Exception {
        List<Integer> body = null;
        String apiKey = null;
        Long projectId = null;
        Integer role = null;
        Boolean isOSMUserId = null;
        api.addUsersToProject(body, apiKey, projectId, role, isOSMUserId);

        // TODO: test validations
    }
    /**
     * Deletes a user from the database
     *
     * This will delete a user completely from the database. It can also optionally anonymize the users data from actions taken in MapRoulette, like change in status for tasks, comments on tasks and answers to survey questions
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws Exception {
        Long osmId = null;
        String apiKey = null;
        Boolean anonymize = null;
        OrgMaprouletteExceptionStatusMessage response = api.deleteUser(osmId, apiKey, anonymize);

        // TODO: test validations
    }
    /**
     * Generates an API_KEY for a specified user
     *
     * This API will generate or regenerate the API_KEY for a specified user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void generateAPIKeyTest() throws Exception {
        Long userId = null;
        String apiKey = null;
        OrgMaprouletteFrameworkModelUser response = api.generateAPIKey(userId, apiKey);

        // TODO: test validations
    }
    /**
     * Retrieves Users public Json information
     *
     * Retrieves a JSON object that represents the user&#x27;s public information that anyone can retrieve. This is a limited set of information that only includes certain fields.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPublicUserTest() throws Exception {
        Long userId = null;
        PublicUser response = api.getPublicUser(userId);

        // TODO: test validations
    }
    /**
     * Retrieves Users public Json information
     *
     * Retrieves User Json based on the supplied OSM username
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPublicUserByOSMUsernameTest() throws Exception {
        String username = null;
        PublicUser response = api.getPublicUserByOSMUsername(username);

        // TODO: test validations
    }
    /**
     * Retrieves Users Saved Challenged
     *
     * Retrieves that list of challenges that has been saved by the User
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSavedChallengesTest() throws Exception {
        Long userId = null;
        String apiKey = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelChallenge> response = api.getSavedChallenges(userId, apiKey, limit, page);

        // TODO: test validations
    }
    /**
     * Retrieves Users Saved Tasks
     *
     * Retrieves that list of tasks that has been saved by the User
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSavedTasksTest() throws Exception {
        Long userId = null;
        String apiKey = null;
        String challengeIds = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelTask> response = api.getSavedTasks(userId, apiKey, challengeIds, limit, page);

        // TODO: test validations
    }
    /**
     * Retrieves Users Json information
     *
     * Retrieves User Json based on the supplied ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws Exception {
        Long userId = null;
        String apiKey = null;
        OrgMaprouletteFrameworkModelUser response = api.getUser(userId, apiKey);

        // TODO: test validations
    }
    /**
     * Retrieves Users Json information
     *
     * Retrieves User Json based on the supplied OSM username
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserByOSMUsernameTest() throws Exception {
        String username = null;
        String apiKey = null;
        OrgMaprouletteFrameworkModelUser response = api.getUserByOSMUsername(username, apiKey);

        // TODO: test validations
    }
    /**
     * Gets a list of users managing project
     *
     * Gets list of users managing project along with their roles (1 - Admin, 2 - Write, 3 - Read)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersManagingProjectTest() throws Exception {
        Long projectId = null;
        String apiKey = null;
        String osmIds = null;
        Boolean includeTeams = null;
        List<OrgMaprouletteFrameworkModelProjectManager> response = api.getUsersManagingProject(projectId, apiKey, osmIds, includeTeams);

        // TODO: test validations
    }
    /**
     * Refresh User Profile
     *
     * Refreshes the user profile from OSM
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void refreshProfileTest() throws Exception {
        Long userId = null;
        String apiKey = null;
        api.refreshProfile(userId, apiKey);

        // TODO: test validations
    }
    /**
     * Remove granted role on project from user
     *
     * Removes Admin, Write, or Read role on a project from a user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeUserFromProjectTest() throws Exception {
        Long userId = null;
        Long projectId = null;
        Integer role = null;
        String apiKey = null;
        Boolean isOSMUserId = null;
        api.removeUserFromProject(userId, projectId, role, apiKey, isOSMUserId);

        // TODO: test validations
    }
    /**
     * Removes granted role on project from a list of users
     *
     * Removes Admin, Write, or Read role on project from a list of users
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeUsersFromProjectTest() throws Exception {
        List<Integer> body = null;
        String apiKey = null;
        Long projectId = null;
        Integer role = null;
        Boolean isOSMUserId = null;
        api.removeUsersFromProject(body, apiKey, projectId, role, isOSMUserId);

        // TODO: test validations
    }
    /**
     * Saves Challenge for a User
     *
     * Saves a Challenge to a user account
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void saveChallengeTest() throws Exception {
        Long userId = null;
        Long challengeId = null;
        String apiKey = null;
        OrgMaprouletteExceptionStatusMessage response = api.saveChallenge(userId, challengeId, apiKey);

        // TODO: test validations
    }
    /**
     * Saves a Task for a User
     *
     * Saves a Task to a user account
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void saveTaskTest() throws Exception {
        Long userId = null;
        Long taskId = null;
        String apiKey = null;
        OrgMaprouletteExceptionStatusMessage response = api.saveTask(userId, taskId, apiKey);

        // TODO: test validations
    }
    /**
     * Search for users by OSM username
     *
     * Retrieves list of matching users
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchUserByOSMUsernameTest() throws Exception {
        String apiKey = null;
        Integer limit = null;
        Object tid = null;
        Object page = null;
        OrgMaprouletteFrameworkModelUser response = api.searchUserByOSMUsername(apiKey, limit, tid, page);

        // TODO: test validations
    }
    /**
     * Set project role for user, removing any prior roles on the project
     *
     * Sets a user&#x27;s role on the project to Admin, Write or Read. This will also remove any other roles on the project from the user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setUserProjectRoleTest() throws Exception {
        Long userId = null;
        Long projectId = null;
        Integer role = null;
        String apiKey = null;
        Boolean isOSMUserId = null;
        api.setUserProjectRole(userId, projectId, role, apiKey, isOSMUserId);

        // TODO: test validations
    }
    /**
     * Unsaves Challenge for a User
     *
     * Unsaves a Challenge to a user account
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsaveChallengeTest() throws Exception {
        Long userId = null;
        Long challengeId = null;
        String apiKey = null;
        OrgMaprouletteExceptionStatusMessage response = api.unsaveChallenge(userId, challengeId, apiKey);

        // TODO: test validations
    }
    /**
     * Unsaves Task for a User
     *
     * Unsaves a Task from a user account
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void unsaveTaskTest() throws Exception {
        Long userId = null;
        Long taskId = null;
        String apiKey = null;
        OrgMaprouletteExceptionStatusMessage response = api.unsaveTask(userId, taskId, apiKey);

        // TODO: test validations
    }
    /**
     * Updates UserSettings
     *
     * Updates the user settings for a specified user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws Exception {
        List<OrgMaprouletteFrameworkModelUserSettings> body = null;
        String apiKey = null;
        Long userId = null;
        OrgMaprouletteFrameworkModelUser response = api.updateUser(body, apiKey, userId);

        // TODO: test validations
    }
    /**
     * Retrieves current user
     *
     * Retrieves the current logged-in user&#x27;s JSON
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void whoamiTest() throws Exception {
        String apiKey = null;
        OrgMaprouletteFrameworkModelUser response = api.whoami(apiKey);

        // TODO: test validations
    }
}
