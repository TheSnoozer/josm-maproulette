/*
 * MapRoulette API
 * API for MapRoulette enabling the creation and maintenance of MapRoulette challenges
 *
 * OpenAPI spec version: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.github.thesnoozer.maproulette.client.api;

import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelGroup;
import io.github.thesnoozer.maproulette.client.model.OrgMaprouletteFrameworkModelTeamUser;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for TeamApi
 */
@Ignore
public class TeamApiTest {

    private final TeamApi api = new TeamApi();

    /**
     * Accept an invitation to join a team
     *
     * Accepts the logged-in user&#x27;s invitation to join a team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void acceptInviteTest() throws Exception {
        Long id = null;
        OrgMaprouletteFrameworkModelTeamUser response = api.acceptInvite(id);

        // TODO: test validations
    }
    /**
     * Grant role to team on project
     *
     * Grant a team an Admin, Write or Read role on the project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addTeamToProjectTest() throws Exception {
        Long teamId = null;
        Long projectId = null;
        Integer role = null;
        api.addTeamToProject(teamId, projectId, role);

        // TODO: test validations
    }
    /**
     * Create a new team
     *
     * Creates a new team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTeamTest() throws Exception {
        OrgMaprouletteFrameworkModelGroup body = null;
        OrgMaprouletteFrameworkModelGroup response = api.createTeam(body);

        // TODO: test validations
    }
    /**
     * Decline an invitation to join a team
     *
     * Decline the logged-in user&#x27;s invitation to join a team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void declineInviteTest() throws Exception {
        Long id = null;
        api.declineInvite(id);

        // TODO: test validations
    }
    /**
     * Delete a team
     *
     * Deletes a team with ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteTeamTest() throws Exception {
        Long id = null;
        api.deleteTeam(id);

        // TODO: test validations
    }
    /**
     * Find teams by name
     *
     * Search for teams by name
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findTest() throws Exception {
        String name = null;
        Integer limit = null;
        Integer page = null;
        List<OrgMaprouletteFrameworkModelGroup> response = api.find(name, limit, page);

        // TODO: test validations
    }
    /**
     * Get teams granted a role on a project
     *
     * Get teams granted an Admin, Write or Read role on a project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTeamsManagingProjectTest() throws Exception {
        Long projectId = null;
        List<OrgMaprouletteFrameworkModelGroup> response = api.getTeamsManagingProject(projectId);

        // TODO: test validations
    }
    /**
     * Invites a user to join a team
     *
     * Invites a user to join a team with the given role
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void inviteUserTest() throws Exception {
        Long id = null;
        Long userId = null;
        Integer role = null;
        OrgMaprouletteFrameworkModelTeamUser response = api.inviteUser(id, userId, role);

        // TODO: test validations
    }
    /**
     * Remove granted roles on project from team
     *
     * Remove roles on a project from a team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeTeamFromProjectTest() throws Exception {
        Long teamId = null;
        Long projectId = null;
        api.removeTeamFromProject(teamId, projectId);

        // TODO: test validations
    }
    /**
     * Remove a member from a team
     *
     * Remove a team member from a team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeTeamMemberTest() throws Exception {
        Long id = null;
        Long userId = null;
        api.removeTeamMember(id, userId);

        // TODO: test validations
    }
    /**
     * Retrieves a team
     *
     * Retrieves a team based on a specific ID.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void retrieveTest() throws Exception {
        Long id = null;
        OrgMaprouletteFrameworkModelGroup response = api.retrieve(id);

        // TODO: test validations
    }
    /**
     * Set granted role of team on project
     *
     * Grant a team an Admin, Write or Read role on the project, clearing any prior roles
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setTeamProjectRoleTest() throws Exception {
        Long teamId = null;
        Long projectId = null;
        Integer role = null;
        api.setTeamProjectRole(teamId, projectId, role);

        // TODO: test validations
    }
    /**
     * Retrieves users who are members of a team
     *
     * Retrieves all the user members of a team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void teamUsersTest() throws Exception {
        Long id = null;
        List<OrgMaprouletteFrameworkModelTeamUser> response = api.teamUsers(id);

        // TODO: test validations
    }
    /**
     * Update a team member&#x27;s role
     *
     * Update a team member&#x27;s granted role on the team
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateMemberRoleTest() throws Exception {
        Long id = null;
        Long userId = null;
        Integer role = null;
        OrgMaprouletteFrameworkModelTeamUser response = api.updateMemberRole(id, userId, role);

        // TODO: test validations
    }
    /**
     * Update a team
     *
     * Updates the team info (name, description, avatar URL)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateTeamTest() throws Exception {
        OrgMaprouletteFrameworkModelGroup body = null;
        Long id = null;
        OrgMaprouletteFrameworkModelGroup response = api.updateTeam(body, id);

        // TODO: test validations
    }
    /**
     * Retrieves all team memberships for a user
     *
     * Retrieves all the given user&#x27;s team memberships
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void userTeamMembershipsTest() throws Exception {
        Long userId = null;
        Object id = null;
        List<OrgMaprouletteFrameworkModelTeamUser> response = api.userTeamMemberships(userId, id);

        // TODO: test validations
    }
}
